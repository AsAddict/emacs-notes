#+TODO: TODO(t) STARTED(s) DELEGATED(d) SOMEDAY(.) WAITING(w) | DONE(x) CANCELLED(c) 
#+PROPERTY: QUANTIFIED Emacs

* How to use this

Before you start working on a task, do a git pull to see if anyone
else has started working on it. If you're starting on a task, tag it
with your name and change the TODO to STARTED. Clocking in and out is
nice. =) You can start with the tasks ready for delegation, but also
feel free to take a look at the other tasks in the file and
suggest/volunteer. =) When discussing, add your initials followed by a
colon and your notes (or create a subtree).

* Tasks ready for delegation
** DELEGATED Transcribe Avdi Grimm's chat												 :alex:transcript:
Shouldn't be verbatim - remove ums, ahs, filler words, etc. =)
** DONE Transcribe Carsten Dominik's chat												 :transcript:
	 CLOSED: [2014-05-18 Sun 23:59]
Shouldn't be verbatim - remove ums, ahs, filler words, etc. =)

** DONE Transcribe Xah Lee's chat 													 :oli:transcript:
Delegated to Oli on 2014-05-05

http://sachachua.com/blog/2014/05/emacs-chat-xah-lee-ergoemacs/
*** DONE Pay invoice for Xah Lee's chat
		 CLOSED: [2014-05-12 Mon 20:20]
* Other delegation notes
** Ideas for tasks to delegate
- Transcribe Emacs Chats, screencasts, other people’s videos
- Research, reach out to, and coordinate with guests for Emacs Chats episodes
  - Prepare a brief introduction/biography
  - Suggest questions to ask them
- Brainstorm and organize questions for resources, blog posts, and other guides
- Create blog posts with screenshots/video/sample code
- Review, organize, and edit existing resources (ex: past blog posts)
- Help me work on productivity guides for Org Mode (ex: http://sach.ac/baby-steps-org-todo) 
- Research specific Emacs packages and write blog posts / tutorials about them (ex: eww)
- Help me with the information design and visual design for emacslife.com and/or my blog
- Revise old transcripts; add structure, recommended actions, links, etc.
** Processes
*** Transcribe Emacs Chat
Transcribe the Emacs Chat at the specified URL. Note that the output does not have to be verbatim, and we don’t need timecodes - please skip “ums”, “ahs”, filler words, etc. If we spell out links or commands, you can type in the actual link or command instead of transcribing how we spell it out. The end result will be an Org file in https://github.com/sachac/emacs-chats - see https://raw.githubusercontent.com/sachac/emacs-chats/gh-pages/chat-janis-mancevics.org for a sample. Send me a pull request or a file. Track your time so that you can get a sense of whether this is worth it for you or not within the budget. If you can tell early on that it’s likely to not be worth it for you (for example, if it takes ten hours to do the first 15 minutes (which it won’t, but who knows?)), tell me and I can assign the task to someone else.
* Projects
** Publishing Emacs
	 :PROPERTIES:
	 :QUANTIFIED: Emacs
	 :END:
*** [#A] Emacs Life																									:project:
**** TODO Sketch out personas
**** TODO Set up mailing list
**** How to Read Emacs Lisp e-mail course 													:project:
[[file:~/personal/elisp-course.org]]
***** DONE Get e-mail sending to work from virtual machine
			 CLOSED: [2014-05-14 Wed 16:17]
			:LOGBOOK:
			CLOCK: [2014-05-14 Wed 16:07]--[2014-05-14 Wed 16:17] =>  0:10
			:END:
			:PROPERTIES:
			:Effort:   0:30
			:END:
***** DONE Send first section to myself and others
			 CLOSED: [2014-05-14 Wed 16:50]
			:LOGBOOK:
			CLOCK: [2014-05-14 Wed 16:17]--[2014-05-14 Wed 16:50] =>  0:33
			:END:
			:PROPERTIES:
			:Effort:   0:30
			:END:
***** DONE Break Emacs Lisp guide up into an e-mail course
			 CLOSED: [2014-05-14 Wed 16:06] SCHEDULED: <2014-05-14 Wed>
***** TODO Take notes on people who are interested in taking course, process course steps
			 SCHEDULED: <2014-05-18 Sun .+2d>
			 :LOGBOOK:
			 - State "DONE"       from "STARTED"    [2014-05-16 Fri 15:01]
			 CLOCK: [2014-05-16 Fri 14:19]--[2014-05-16 Fri 15:01] =>  0:42
			 CLOCK: [2014-05-16 Fri 13:39]--[2014-05-16 Fri 14:06] =>  0:27
			 CLOCK: [2014-05-14 Wed 16:50]--[2014-05-14 Wed 17:25] =>  0:35
			 CLOCK: [2014-05-13 Tue 17:50]--[2014-05-13 Tue 18:20] =>  0:30
			 CLOCK: [2014-05-12 Mon 21:00]--[2014-05-12 Mon 22:04] =>  1:04
			 CLOCK: [2014-05-12 Mon 20:28]--[2014-05-12 Mon 20:47] =>  0:19
			 :END:
			:PROPERTIES:
			:Effort:   1:00
      :CLOCK_MODELINE_TOTAL: today
			:LAST_REPEAT: [2014-05-16 Fri 15:01]
			:END:
***** DONE Package beginner1 as a lesson
			 CLOSED: [2014-05-13 Tue 21:05]
			 SCHEDULED: <2014-05-13 Tue>
			 :LOGBOOK:
			 CLOCK: [2014-05-13 Tue 19:53]--[2014-05-13 Tue 21:05] =>  1:12
			 :END:
			:PROPERTIES:
			:Effort:   0:30
			:END:
***** TODO Package beginner2 as a lesson
***** DONE Make checklist of topics, figure out where people are
			 CLOSED: [2014-05-12 Mon 22:04]
**** How to Read Emacs Lisp
[[file:how-to-read-emacs-lisp.org][Link]]
***** TODO Write objectives for each section
***** TODO Pick chunk size for sections
***** TODO Break guide up into parts that can be focused on for 15-60 minutes
***** TODO Add more exercises
***** TODO Add more examples
		 	:PROPERTIES:
		 	:Effort:   1:00
		 	:END:
***** TODO Convert to nicely-formatted EPUB
		 	:PROPERTIES:
		 	:Effort:   2:00
		 	:END:

***** DONE Incorporate DanP's second round of feedback
			 CLOSED: [2014-05-07 Wed 19:58]
			:PROPERTIES:
			:Effort:   2:00
			:END:
***** DONE Write about keybinding																			:sacha:
		 	 CLOSED: [2014-05-01 Thu 19:36]
		 	:LOGBOOK:
		 	CLOCK: [2014-05-01 Thu 18:41]--[2014-05-01 Thu 19:36] =>  0:55
		 	CLOCK: [2014-05-01 Thu 18:29]--[2014-05-01 Thu 18:29] =>  0:00
		 	:END:
		 	:PROPERTIES:
		 	:Effort:   1:00
		 	:END:
***** DONE Write about defuns
		 	 CLOSED: [2014-05-05 Mon 11:16]
		 	:LOGBOOK:
		 	CLOCK: [2014-05-05 Mon 11:09]--[2014-05-05 Mon 11:16] =>  0:07
		 	CLOCK: [2014-05-05 Mon 09:02]--[2014-05-05 Mon 09:37] =>  0:35
		 	:END:
		 	:PROPERTIES:
		 	:Effort:   1:00
		 	:END:
***** DONE Write about lambda
		 	 CLOSED: [2014-05-05 Mon 11:16]
		 	:PROPERTIES:
		 	:Effort:   1:00
		 	:END:
***** DONE Incorporate @philandstuff's feedback
	 CLOSED: [2014-05-01 Thu 18:17]
	 :LOGBOOK:
	 CLOCK: [2014-05-01 Thu 18:08]--[2014-05-01 Thu 18:17] =>  0:09
	 :END:
	 :PROPERTIES:
	 :Effort:   0:30
	 :END:
https://twitter.com/philandstuff/status/461969774227247104
- typo
- remove scroll
***** DONE Add more details to reading Emacs Lisp tutorial
		 	 CLOSED: [2014-04-28 Mon 11:54]
	 	 	:LOGBOOK:
	 	 	- State "DONE"       from "STARTED"    [2014-04-28 Mon 11:54]
	 	 	CLOCK: [2014-04-28 Mon 10:58]--[2014-04-28 Mon 11:54] =>  0:56
	 	 	:END:
	 	 	:PROPERTIES:
	 	 	:Effort:   2:00
	 	 	:END:
*** [#C] Emacs Basics 																				:project:someday:
	 	:PROPERTIES:
	 	:LINK:     [[file:~/sachac.github.io/evil-plans/index.org::*create%20a%2010-week%20Emacs%20Basics%20course][create a 10-week Emacs Basics course]]
	 	:END:
**** DONE Add more sections to Emacs Lisp tutorial
		 	CLOSED: [2014-04-23 Wed 15:23] SCHEDULED: <2014-04-23 Wed>
		 	:LOGBOOK:
		 	- State "DONE"       from "TODO"       [2014-04-23 Wed 15:23]
		 	:END:
**** TODO Make video on extending Emacs 
		 :PROPERTIES:
		 :Effort:   2:00
		 :END:
https://twitter.com/gozes/status/446397063194894337
**** TODO Build - Emacs: Record Emacs Basics video on themes and faces
		 :PROPERTIES:
		 :Effort:   2:00
		 :END:
**** TODO [#A] Record session on learning keyboard shortcuts
		 :PROPERTIES:
		 :CREATED:  [2014-04-16 Wed 12:20]
		 :END:
**** TODO Write about how to scroll
*** A map for customizing Org
- Common options you may want to change
- Advanced options and why, plus examples of what you can do with them

Difference compared to M-x customize-group org - highlights specific things you may want to tweak, and provides screenshots/examples.
**** TODO Find a way to easily make a list of all the customization options by group
*** TODO Share reading Emacs config video															 :blog:
https://www.youtube.com/watch?v=uP9qmhcI9IQ
*** TODO Record another Emacs config video
*** DONE Add support page to emacs-notes
	 	CLOSED: [2014-05-02 Fri 16:12]
	 	:LOGBOOK:
	 	CLOCK: [2014-05-02 Fri 16:03]--[2014-05-02 Fri 16:12] =>  0:09
	 	:END:
	 	:PROPERTIES:
	 	:Effort:   0:30
	 	:END:
*** TODO Sketch out Org Mode coaching

*** TODO Write a tutorial from installing Emacs to getting Org 8 updated    
:PROPERTIES:
:Effort: 2:00
:END:
*** DONE How to update the Org 7 that comes with Emacs to Org 8 (more configuration! better exports!)
		 CLOSED: [2014-05-09 Fri 11:28]
		:LOGBOOK:
		CLOCK: [2014-05-09 Fri 11:03]--[2014-05-09 Fri 11:28] =>  0:25
		:END:
:PROPERTIES:
:Effort: 2:00
:ID:       o2b:1d2bbf88-93b3-449e-8129-45dfb568f8a7
:POST_DATE: [2014-05-09 Fri 11:16]
:POSTID:   27231
:BLOG:     sacha
:END:

#+begin_html
<div class="update">Update 2014-05-12: Simplified thanks to Sebastian's note that Org 8 is available in the built-in package repository, yay!</div>
#+end_html

The Org Mode included in Emacs 24 is version 7. Version 8 has lots of new configuration variables and the exporting mechanism has been rewritten. However, it needs to be installed in an Emacs that has not yet loaded any Org code or files. Here's how you can upgrade your Org:

1. Start Emacs with =emacs -q=. This skips your personal configuration.

2. You will need an Internet connection for this step. Type =M-x package-install=, and type in =org=. This will install the latest version of Org from the built-in package repository.

3. Edit your =~/.emacs.d/init.el= (or =~/.emacs=, if you're using that instead). Add the following code to the beginning of the file:
	 #+begin_src emacs-lisp
	 (package-initialize)
   (setq package-enable-at-startup nil)
	 #+end_src

   This will load the installed packages when you start Emacs, overriding the buit-in Org 7 with the Org 8 version that you installed.

   Advanced note: If you've downloaded Emacs Lisp code that should override code already installed through packages, you need to change this to =(package-initialize nil)= instead, and add =(package-initialize t)= after your =load-path= settings.

4. Check your configuration for references to the older version of Org. In particular, look for any configuration related to exporting (ex: =(require 'org-html)=). You can change those lines to their Org 8 equivalents (ex: =(require 'ox-html)=), but it's probably easier to just comment them out for now. You can comment out lines by adding =;= to the beginning.
 
5. Save your =init.el= and restart Emacs (this time, without the =-q= option). =M-x org-version= should now start with =Org-mode version 8=.

6. Review your Emacs configuration for any changes that you will need to make. You can ask the [[http://orgmode.org/community.html][Org Mode mailing list]] for help if you get stuck. 

Good luck!

*** TODO Announce guide for learning Emacs Lisp
*** TODO Announce EmacsLife.com
*** TODO Write about load path shadowing
	 	:PROPERTIES:
	 	:Effort:   0:30
	 	:END:
*** TODO Write about windows
	 	:PROPERTIES:
	 	:Effort:   0:30
	 	:END:
*** TODO Write about undo
	 	:PROPERTIES:
	 	:Effort:   0:30
	 	:END:

http://emacs-fu.blogspot.ca/2010/11/undo.html

*** TODO Prepare a financial report of how much I'm investing in the Emacs community
- Emacs chat transcripts
- Hosting, domain names
- Other delegation experiments
*** CANCELLED Make it easier to bookmark sections of guide
	 	CLOSED: [2014-05-01 Thu 18:05]
	 	:LOGBOOK:
	 	CLOCK: [2014-04-30 Wed 18:55]--[2014-04-30 Wed 19:15] =>  0:20
	 	:END:
	 	:PROPERTIES:
	 	:Effort:   1:00
	 	:END:
*** DONE Organize Emacs resources into starting/improving/enjoying
	 CLOSED: [2014-04-30 Wed 17:14]
	 :LOGBOOK:
	 CLOCK: [2014-04-30 Wed 16:24]--[2014-04-30 Wed 17:14] =>  0:50
	 :END:
	 :PROPERTIES:
	 :Effort:   2:00
	 :END:
- https://github.com/sachac/sharing/blob/gh-pages/blog.org

*** DONE Create graphviz map for learning Org Mode for Emacs		:graph:sacha:
	 	CLOSED: [2014-04-28 Mon 18:33]
	 	:LOGBOOK:
	 	CLOCK: [2014-04-28 Mon 17:56]--[2014-04-28 Mon 18:33] =>  0:37
	 	:END:
	 	:PROPERTIES:
	 	:Effort:   1:00
	 	:END:

*** DONE Make blog posts available offline
	 	CLOSED: [2014-04-30 Wed 18:51]
	 	:LOGBOOK:
	 	- State "DONE"       from "TODO"       [2014-04-30 Wed 18:51]
	 	:END:
*** DONE Build a directory of Emacs-related videos - maybe everything with at least 1000 views.
	 	CLOSED: [2014-04-30 Wed 18:52]
	 	:LOGBOOK:
	 	- State "DONE"       from "TODO"       [2014-04-30 Wed 18:52]
	 	:END:
	 	:PROPERTIES:
	 	:Effort:   3:00
	 	:END:
*** DONE Contemplate git or blog posts
		 CLOSED: [2014-04-26 Sat 14:41]
		 :LOGBOOK:
		 - State "DONE"       from "STARTED"    [2014-04-26 Sat 14:41]
		 CLOCK: [2014-04-25 Fri 14:18]--[2014-04-25 Fri 14:47] =>  0:29
		 :END:
		 :PROPERTIES:
		 :Effort:   0:30
		 :END:

Blog posts 
+ comments and discussions
+ subscriptions
+ search

Separate static pages
+ easier to add TODOs to agenda
+ other people can add/update
+ can see updates through Github notifications
+ excuse to learn Jekyll?
Yes, patch requests!

*** DONE Move Emacs Chat transcripts to Github?
	 	CLOSED: [2014-04-26 Sat 14:41]
	 	:LOGBOOK:
	 	- State "DONE"       from "TODO"       [2014-04-26 Sat 14:41]
	 	:END:
*** DONE Annotate my Emacs configuration    
     CLOSED: [2014-04-09 Wed 13:32] SCHEDULED: <2014-04-09 Wed>
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-04-09 Wed 13:32]
CLOCK: [2014-04-09 Wed 12:44]--[2014-04-09 Wed 13:32] =>  0:48
CLOCK: [2014-04-09 Wed 11:50]--[2014-04-09 Wed 12:19] =>  0:29
:END:

:PROPERTIES:
:Effort: 1:00
:END:
*** DONE Draft guide to getting started with Emacs Lisp
     CLOSED: [2014-04-09 Wed 15:51] SCHEDULED: <2014-04-09 Wed>
     :LOGBOOK:
     - State "DONE"       from "STARTED"    [2014-04-09 Wed 15:51]
     CLOCK: [2014-04-09 Wed 13:33]--[2014-04-09 Wed 15:51] =>  2:18
     CLOCK: [2014-04-09 Wed 11:28]--[2014-04-09 Wed 11:50] =>  0:22
     :END:
     :PROPERTIES:
     :Effort:   2:00
     :END:


- Existing resources
  - http://cjohansen.no/an-introduction-to-elisp: Focuses on Emacs Lisp as a way of extending Emacs, uses programming examples (test cases)
  - [[https://www.gnu.org/software/emacs/manual/html_mono/eintr.html][An Introduction to Programming in Emacs Lisp]]: A bit abstract
  - http://joelmccracken.github.io/entries/emacs-lisp-for-hackers-part-1-lisp-essentials/: Starts with ielm, focuses on data structures; other parts?
  - http://ergoemacs.org/emacs/elisp.html: Good collection of idioms and common uses.
- Differences
  - I want to write a friendly guide to Emacs Lisp programming, focusing on it as a way to customize Emacs. We'd start off with =(setq ...)=, maybe move on to simple hooks, and then define interactive commands, then interactive prompts.

*** DONE Get Emacs to show me a month of completed tasks, organized by project    
     CLOSED: [2014-04-11 Fri 14:56] SCHEDULED: <2014-04-11 Fri>
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-04-11 Fri 14:56]
CLOCK: [2014-04-11 Fri 13:50]--[2014-04-11 Fri 14:56] =>  1:06
:END:

My goal is to be able to see what I've done in a month.
An easy way to do that is to look at log mode for a month of tasks.
Ooh. I had no idea there's a C-c a L org timeline... That's kinda nifty, combined with log mode. Maybe agenda?

Okay. That's a start. That shows me by date. But do I really want it by project instead? 

Oooh, maybe R would be helpful. It adds the clock table...

TADA!

#+begin_src emacs-lisp
  (defun sacha/org-review-month (start-date)
    "Review the month's clocked tasks and time."
    (interactive (list (org-read-date)))
    ;; Set to the beginning of the month
    (setq start-date (concat (substring start-date 0 8) "01"))
    (let ((org-agenda-show-log t)
          (org-agenda-start-with-log-mode t)
          (org-agenda-start-with-clockreport-mode t)
          (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3)))
      (org-agenda-list nil start-date 'month)))
#+end_src



:PROPERTIES:
:Effort: 2:00
:END:
*** DONE Make it easier to cross-link Org    
     CLOSED: [2014-04-06 Sun 16:06] SCHEDULED: <2014-04-06 Sun>
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-04-06 Sun 16:06]
CLOCK: [2014-04-06 Sun 15:29]--[2014-04-06 Sun 16:06] =>  0:37
:END:

:PROPERTIES:
:Effort: 0:30
:END:

*** DONE Build - Emacs: Prettify baby steps guide to Org Mode
	 	CLOSED: [2014-03-05 Wed 16:56] SCHEDULED: <2014-03-05 Wed>
	 	:LOGBOOK:
	 	- State "DONE"       from "TODO"       [2014-03-05 Wed 16:56]
	 	:END:
*** DONE Build - Emacs: Make a guide to Dired
	 	CLOSED: [2014-03-05 Wed 16:34] SCHEDULED: <2014-03-05 Wed>
	 	:LOGBOOK:
	 	- State "DONE"       from "TODO"       [2014-03-05 Wed 16:34]
	 	:END:
*** DONE Build - Emacs: Record Emacs Basics video for calling commands by name
   CLOSED: [2014-03-17 Mon 19:52] SCHEDULED: <2014-03-17 Mon>
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2014-03-17 Mon 19:52]
   :END:

:PROPERTIES:
:Effort: 1:00
:END:
*** DONE Build - Emacs: Record Emacs Basics video on Emacs
     CLOSED: [2014-03-24 Mon 13:40] SCHEDULED: <2014-03-24 Mon>
     :LOGBOOK:
     - State "DONE"       from "STARTED"    [2014-03-24 Mon 13:40]
     CLOCK: [2014-03-24 Mon 13:40]--[2014-03-24 Mon 13:40] =>  0:00
     :END:
     :PROPERTIES:
     :Effort:   2:00
     :END:

Hello, I'm Sacha Chua, and this is an Emacs Basics video on customizing Emacs. Emacs is incredibly flexible. You can tweak it to do much more than you might expect from a text editor. Here's how you can get started.

You can change tons of options through the built-in customization interface. Explore the options by typing =M-x customize=. Remember, that's =Alt-x= if you're using a PC keyboard and =Option-x= if you're on a Mac. So for me, that's =Alt-x= =customize= =<Enter>=. In the future, I'll just refer to this as the =Meta= key, so remember which key is equivalent to =Meta= on your keyboard.

After you run =M-x customize=, you'll see different groups of options. Click on the links to explore a group. 

For example, people often want to change the backup directory setting.
This is the setting that controls where the backup files (the files
ending in ~) are created. You've probably noticed that they clutter
your current directory by default.

To change this setting, select the *Files > Backup* group. Look for the entry that says *Backup Directory Alist.* Click on the arrow, or move your point to the arrow and press =<Enter>=. You'll see that the value is =nil=. Click on *INS* or move your point to *INS* and press =<Enter>=. Fill it in as follows:
- Regexp matching filename: =.=
- Backup directory name: =~/.emacs.d/backups=

Click on *State* and choose *Save for future sessions*. This will save your changes to =~/.emacs.d/init.el=. When you're done, type =q= to close the screen.

You can also jump straight to customizing a specific variable. For example, if you want to change the way Emacs handles case-sensitive search, you can use =M-x customize-variable= to set the =case-fold-search= variable. By default, case fold search is on, which means that searching for a lower-case "hello" will match an upper-case "HELLO" as well. If you would like to change this so that lowercase only matches lowercase and uppercase matches only uppercase, you can toggle this variable. I like leaving case fold search on because it's more convenient for me. If you make lots of changes, you can use the *Apply and Save* button to save all the changes on your current screen.

The Customize interface lets you change lots of options, but not everything can be changed through Customize. That's where your Emacs configuration file comes in. This used to be a file called =~/.emacs= in your home directory, and you'll still come across lots of pages that refer to a =.emacs= file (or "dot emacs"). The new standard is to put configuration code in your =~/.emacs.d/init.el= file, which you can create if it does not yet exist.

What goes into your =~/.emacs.d/init.el= file? If you open it now, you'll probably find the settings you saved using =M-x customize=. You can also call functions, set variables, and even override the way Emacs works. As you learn more about Emacs, you'll probably find Emacs Lisp snippets on web pages and in manuals. For example, the Org manual includes the following lines:

#+begin_src emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
#+end_src

This code sets =C-c l= (that's =Control-c l=) to run =org-store-link=, =C-c c= to run =org-capture=, =C-c a= to run =org-agenda=, and =C-c b= to run =org-iswitchb=. You can add those to the end of your =~/.emacs.d/init.el= file. They'll be loaded the next time you start Emacs. If you want to reload your =~/.emacs.d/init.el= without restarting, use =M-x eval-buffer=.

As you experiment with configuring Emacs, you may run into mistakes or errors. You can find out whether it's a problem with Emacs or with your configuration by loading Emacs with =emacs -Q=, which skips your configuration. If Emacs works fine with your configuration, check your =~/.emacs.d/init.el= to see which code messed things up. You can comment out regions by selecting them and using =M-x comment-region=. That way, they won't be evaluated when you start Emacs. You can uncomment them with =M-x uncomment-region=. 

Emacs gets even awesomer when you tailor it to the way you want to work. Enjoy customizing it!

*** DONE Reach out regarding Emacs Google Hangout?
	 	CLOSED: [2014-03-30 Sun 14:20] SCHEDULED: <2014-03-31 Mon>
	 	:LOGBOOK:
	 	- State "DONE"       from "TODO"       [2014-03-30 Sun 14:20]
	 	:END:
*** DONE Get a list of Emacs videos
	 CLOSED: [2014-05-01 Thu 18:06]
			:PROPERTIES:
			:Effort:   1:00
			:END:
Considered YouTube Data API, but will try with humans first
*** Beeminder.el
[[~/code/beeminder.el/beeminder.el]]
**** DONE Fix keymap in beeminder.el
			 CLOSED: [2014-04-16 Wed 16:41]
			:LOGBOOK:
			- State "DONE"       from "STARTED"    [2014-04-16 Wed 16:41]
			CLOCK: [2014-04-16 Wed 16:38]--[2014-04-16 Wed 16:41] =>  0:03
			:END:
			:PROPERTIES:
			:Effort:   0:10
			:END:
Oh! Already fixed, yay.
**** DONE Hook Beeminder into Gnus to track sent messages
			 CLOSED: [2014-04-16 Wed 17:13]
			:LOGBOOK:
			- State "DONE"       from "STARTED"    [2014-04-16 Wed 17:13]
			CLOCK: [2014-04-16 Wed 16:42]--[2014-04-16 Wed 17:13] =>  0:31
			:END:
			:PROPERTIES:
			:Effort:   0:30
			:END:

(defun sacha/beeminder-track-message ()
	(save-excursion
		(goto-char (point-min))
		(when (re-search-forward "Newsgroups: .*emacs")
			(goto-char (point-min))
			(when (re-search-forward "Subject: \\(.*\\)" nil t)
				(beeminder-add-data "orgml" "1" (match-string 1))))))
(add-hook 'message-send-news-hook 'sacha/beeminder-track-message)


**** DONE Improve Emacs Beeminder    
     CLOSED: [2014-04-08 Tue 18:08] SCHEDULED: <2014-04-08 Tue>
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-04-08 Tue 18:08]
CLOCK: [2014-04-08 Tue 17:00]--[2014-04-08 Tue 18:08] =>  1:08
:END:
http://www.philnewton.net/code/beeminder-el/    

- fix README mispelling
- Remove user bindings
- Fiddle with how it stores data
- Cache things properly 

:PROPERTIES:
:Effort: 1:00
:END:
*** Emacs ABCs
	 	:PROPERTIES:
	 	:LINK:     [[file:~/Dropbox/Public/evil-plans.org::*make%20ABCs%20of%20Emacs][make ABCs of Emacs]]
	 	:END:
**** DONE Draw "A" page for Emacs ABCs														 :@drawing:
		 CLOSED: [2014-04-11 Fri 15:38] SCHEDULED: <2014-04-11 Fri>
		 :LOGBOOK:
		 - State "DONE"       from "STARTED"    [2014-04-11 Fri 15:38]
		 CLOCK: [2014-04-11 Fri 14:57]--[2014-04-11 Fri 15:38] =>  0:41
		 :END:
		 :PROPERTIES:
		 :Effort:   2:00
		 :END:
** [#A] Emacs chats																									:project:
*** Bozhidar Batsov
- Emacs Redux
  - animated GIFs
  - publishing workflow? Octopress, Jekyll, git; https://github.com/bbatsov/bbatsov.github.com
http://batsov.com/about/
- Projectile
- CIDER maintenance
Technical lead, Tradeo: Rails, NoedJS

*** Xah Lee
**** DONE Set up chat with Xah Lee
	 	 CLOSED: [2014-05-01 Thu 22:08]
**** DONE Record session with Xah Lee
		 	CLOSED: [2014-05-02 Fri 21:15] SCHEDULED: <2014-05-02 Fri>
**** DONE Review new video and post it
		 	CLOSED: [2014-05-03 Sat 15:59] SCHEDULED: <2014-05-03 Sat>
		 :PROPERTIES:
		 :Effort:   0:30
		 :END:
**** DONE Give feedback on show notes for Xah Lee
		 CLOSED: [2014-05-07 Wed 19:07]
		 :LOGBOOK:
		 CLOCK: [2014-05-07 Wed 18:35]--[2014-05-07 Wed 19:07] =>  0:32
		 CLOCK: [2014-05-07 Wed 17:02]--[2014-05-07 Wed 17:08] =>  0:06
		 :END:
		 :PROPERTIES:
		 :Effort:   0:30
		 :END:
**** DONE Post show notes
		 CLOSED: [2014-05-11 Sun 21:44]
https://trello.com/c/YL1hYhP4/208-post-show-notes-for-emacs-chat-xah-lee
**** DONE Incorporate and revise transcript
		 CLOSED: [2014-05-12 Mon 13:18] SCHEDULED: <2014-05-12 Mon>
		 :LOGBOOK:
		 CLOCK: [2014-05-12 Mon 12:40]--[2014-05-12 Mon 13:00] =>  0:20
		 :END:
		 :PROPERTIES:
		 :Effort:   2:00
		 :END:
**** TODO Follow up on Xah Lee's suggestions
- [[http://ergoemacs.org/emacs/blog.html][Who Do You Like to See in Sacha Chua&apos;s Emacs Chat?]]: 

*** Iannis Zannos
**** DONE Post transcript of Iannis Zannos' chat
		 	CLOSED: [2014-05-04 Sun 14:19] SCHEDULED: <2014-05-04 Sun>
		 	:LOGBOOK:
		 	CLOCK: [2014-05-04 Sun 14:13]--[2014-05-04 Sun 14:19] =>  0:06
		 	:END:
		 :PROPERTIES:
		 :Effort:   0:15
		 :END:
*** Phil Hagelberg
**** DONE Prepare for session with technomancy
		 CLOSED: [2014-05-11 Sun 21:45]
		 :LOGBOOK:
		 CLOCK: [2014-05-09 Fri 11:35]--[2014-05-09 Fri 11:37] =>  0:02
		 :END:
		 :PROPERTIES:
		 :Effort:   0:30
		 :END:
**** DONE Record session with technomancy
		 CLOSED: [2014-05-09 Fri 23:07] SCHEDULED: <2014-05-09 Fri 22:00>
		 :LOGBOOK:
		 CLOCK: [2014-05-09 Fri 22:00]--[2014-05-09 Fri 23:07] =>  0:27
		 :END:

Clojure 

http://technomancy.us/167
This really resonated with me because it emphasizes that people are more important than programs. For me sharing is the thing that makes programming even worth doing in the first place. So it got me thinking about different technologies and what kind of people they're good for helping.

5-year-old kid, sons

Swarm coding? http://technomancy.us/162, http://technomancy.us/146

sile-limit

Starter kit? http://technomancy.us/153
**** DONE Prep for call with technomancy
		 CLOSED: [2014-05-09 Fri 23:07]
		 :LOGBOOK:
		 CLOCK: [2014-05-09 Fri 21:33]--[2014-05-09 Fri 22:00] =>  0:27
		 :END:
		 :PROPERTIES:
		 :Effort:   0:30
		 :END:
**** TODO Transcribe this myself
*** Christopher Wellons
**** DONE Set up chat with Christopher Wellons
	 	 CLOSED: [2014-05-01 Thu 22:08]
*** Mickey Petersen
**** DONE Set up chat with masteringemacs
	 	 CLOSED: [2014-05-01 Thu 22:08]
*** Possible guests
- Tikhon Jelvis?
- Follow up with Xah Lee's list

***** DONE Get Gnus send mail working again
			 CLOSED: [2014-05-14 Wed 18:49] SCHEDULED: <2014-05-16 Fri>
** Connecting - Emacs
*** International Lisp Conference 2014 (August)
Contact: Dave Cooper
**** STARTED Draft title, abstract, bio
		 :LOGBOOK:
		 CLOCK: [2014-05-07 Wed 11:18]--[2014-05-07 Wed 11:40] =>  0:22
		 :END:
		 :PROPERTIES:
		 :Effort:   1:00
		 :END:
		 https://mail.google.com/mail/u/0/?pli=1#inbox/145be629a212ac1d

Draft outline: https://gist.github.com/sachac/0eb152c9ffe74cd2fe23


Title: Evil Plans for Taking Over the World

"A man's reach should exceed his grasp, or what's a paren for?" Come
to this session for practical tips on applied selfishness and
community-building, and join in the conspiracy to take over the world
(or a reasonable portion thereof).

Bio: Sacha Chua loves getting Emacs to do all sorts of things that
boggle casual passers-by. She's working on more resources for Emacs
beginners and enthusiasts, including doodled cheat sheets and
interviews with people who are even more into Emacs Lisp than she is
(emacslife.com). You can check out her blog at LivingAnAwesomeLife.com
or follow her on Twitter (@sachac).

Possible titles:		 
- For Great Community
- Build You a Community for Great Lisp
  (Heh, can I get away with calling it this? Maybe I can ask the Haskell guide author =) )
- Paren by Paren: Build Lisp Communities
- Evil Plans for Taking Over the World

Goals:
- Inspire people to work on building up their communities by showing them concrete things they can do and the effects of this on the community
- Get more people hooked on Org Mode for literate programming and publishing ;)

Topics
- Selfish reasons for taking over the world
	- The more people learn and share, the more you can take advantage of
	- Other people writing code
  - Other people doing work
  - Other people connecting
  - Encouragement, inspiration, fun
- Niche
  - Parentheses are scary?
  - Terms
  - Old, obscure
    - Clojure  
  - But hey, things seem to be looking up
- Keeping yourself enthused
	- Working on obscure things; can feel isolated
	- Virtual
- Growing community
	- Might not be easy to get numbers
		- Frame of reference
	- Anecdotally, feels like things are growing
	- Virtual community is important too, so that you don't feel isolated
- Preaching to the choir
	- We tend to get settled in our ways
	- New things that you can do 
		- Google Hangout, podcasting, etc.
	- Ways you can encourage _other_ people to share
- Fill in the gaps
- Key ideas
	- Share the code
	  - Snippets? Anonymized?
	- Share the process
	- Share the attitude
		- Code as conversation
	- Share the spotlight
	  - Help other people gain confidence and become part of the community
- Tactics
	1. Blog posts, articles, mini-guides, e-books
		 1. Literate programming
		 2. Emacs configuration
		 3. Workflow demo?
		 4. Blog planets
				- If you have a blog, make sure you're listed
				- You don't have to blog exclusively about the topic; see about category-specific feeds
				- Framing
					- Inspiration
					- Discovery
	2. Newsgroups, mailing lists
		 - Gmane, Gwene
	3. IRC: don't forget to bring in the newbies =)
		 - Also: gist, lisppaste
	4. Quora, StackOverflow, other Q&A sites	
     - Check on these once in a while
	5. Screencasts
		 - Code walkthroughs
		 - Live coding
	6. Pairing (screen-sharing, tmux or screen)
     - Swarms
		 - Ask for notes/posts from the people you help
	7. Video chats: Google Hangout on Air, Skype, etc.
	8. Meetups, conferences, virtual communities?
	9. Sharing source, packages, etc.
	10. Way of life - Talk about practical applications and goofy curiosities
			- Break out of the toy box
			- Stretch the concept
- Call to action
	- Outreach
	  - Preaching to the choir (conference!) - but also, the rest of the year
	- Share what you're learning (don't wait to be an expert) _and_ your enthusiasm
  - Write about the _process_, too
	- Shine the spotlight on other people; build connections



- Growing popularity of Emacs (meetups, etc.)
	- Why?
	- What can we learn?

- Why me? (Bio notes)
	- Blogging
	- Emacs chats
	 
**** DONE Start planning talk for International Lisp Conference
		 CLOSED: [2014-05-09 Fri 20:25] SCHEDULED: <2014-05-10 Sat>
			:LOGBOOK:
			CLOCK: [2014-05-09 Fri 20:01]--[2014-05-09 Fri 20:25] =>  0:24
			:END:
		 :PROPERTIES:
		 :Effort:   0:30
		 :END:
** Other Emacs tasks
*** STARTED Get mplayer working with emms on Windows
		:LOGBOOK:
		CLOCK: [2014-05-09 Fri 14:19]--[2014-05-09 Fri 14:32] =>  0:13
		:END:
		:PROPERTIES:
		:Effort:   0:30
		:END:

(require 'emms)
(require 'emms-setup)
(require 'emms-player-mplayer)
(require 'emms-source-file)
(require 'emms-source-playlist)
(emms-default-players)
(emms-play-file "~/Downloads/IRC with ERC.mp3")

Okay, this is starting to shape up. I need a quick command to pause/play, and another one to skip back a little bit. 

#+begin_src emacs-lisp
(require 'emms)
(require 'emms-setup)
(require 'emms-player-mplayer)
(require 'emms-source-file)
(require 'emms-source-playlist)
(emms-default-players)

(bind-key "<apps> p" 'emms-pause)
(bind-key "<apps> <apps>" 'emms-pause)
(bind-key "<apps> b" 'emms-seek-backward)
#+end_src

* Notes

- What am I looking for?
  - Things that I can do but that other people can gain more value from if they do it
    - Okay value (ex: transcripts)
  - Things that benefit from other perspectives (like writing, research, reading, etc.)
    - Medium value
  - Things that I don't even think of doing (like snippets and indices and stuff; ideas for making this better)
    - High value
  - Vision
    - My blog + more structure / resources
    - Github for additional resources, easy to view, TODOs they can add to their agenda
      - Plain text for the win!
      - Also, pull request
      - RSS?
    - Identifying gaps to be written about
    - Starting, improving, enjoying Emacs; visual guides / doodles
    - One-on-one help, etc.
    - Domain name, topic-focused view?
      - Yes, especially if this is more structured =)
      - Will continue to cross-post to my main blog
			- Website? Let's push Org as far as possible
- What kind of work do you enjoy?
  - Emacs-related things, yay! Not as good at Lisp yet, but that's perfect, because Alex can learn
  - build-site.el ex: blockquote
  - Anything Emacsy, yay!
  - ASCIIcasts?
- What don't you like?
  - No Windows stuff =) (So I'm not going to ask you to help me figure out why Gnuplot and Windows is like ARGH!)
- What kind of hourly rate is fair for you?
  - Affects what I ask you to work on =) 
- Paypal details, invoice for time so far?
- Coordinate through Org mode?
	- maybe a tasks.org in emacs-notes or separate? 
- Possible tasks
  - Transcribe Avdi Grimm's chat - yup!
  - Help make my site even easier to use and more fun to explore
	- Organize resources into starting/improving/enjoying
    - https://github.com/sachac/sharing/blob/gh-pages/blog.org
    - emacs-notes
      - Maybe have everything in one git repository? submodules?
  - Brainstorm and draft posts
		- Keeping your .emacs.d/init.el organized    
  - Help come up with questions and guests for Emacs Chats?
    - technomancy?
  - Work on newbie guides?
  - Emacs Chat - find someone with a great HTML/JS/CSS setup?
  - Making Emacs Chats better?
    - Structure
      - How did you get started with Emacs?
      - How do you learn more?
      - Config (where? make sure to add links)
    - Actions? With notes and resources?
      - Ex: literate programming
