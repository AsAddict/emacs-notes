#+TITLE: How to read Emacs Lisp so that you can customize Emacs

* Introduction

Hi! This is a guide to help you pick up the basics of reading
customization code for Emacs - little snippets of Emacs Lisp that you
can add to your =~/.emacs.d/init.el= to change how Emacs works. I hope
this will help you learn how to borrow interesting snippets from
README files and other people's configs so that you can tweak Emacs to
fit the way you work. This is not a detailed guide on how to
understand Emacs internals, but by the time you find yourself digging
through comint.el to figure out what's going on with command
interpretation, you probably already know your way around.

We'll assume that you already have Emacs installed and that you've
gone through the built-in tutorial (*Help - Emacs Tutorial*). I'll
also assume you have a little programming background or can deal with
the concepts of variables and functions. Feel free to ask questions if
you get stuck on something or if you want to clarify your
understanding.

Please e-mail questions, comments, and suggestions to
[[mailto:sacha@sachachua.com][sacha@sachachua.com]]. I want to make this guide better, and I'd love to
hear from you. If you would like to help improve this guide, you can
find it on [[https://github.com/sachac/emacs-notes/blob/gh-pages/how-to-read-emacs-lisp.org][Github]] - pull requests welcome!

Now, on with the guide.

* The wonderful world of Emacs customization

To make the most of Emacs, learn how to read and write Emacs Lisp.
Most of Emacs is written in Emacs Lisp: the packages that add extra
functionality, the configuration code to set different options. You
can change large parts of how Emacs behaves even without restarting
Emacs.

Remember: with great power comes lots of time debugging if you mess
things up. This is a guide to help you avoid messing up, so you can
build the confidence to learn more. It's worth it. Start with one-line
in ten years (or three, or twenty, or next month - all up to you),
you'll be able to tweak Emacs to do more things than other people
might imagine a text editor can do.

This is what Emacs Lisp code looks like:

#+begin_src emacs-lisp
(message "Hello world!")
#+end_src

Or something slightly more useful:

#+begin_src emacs-lisp
(setq delete-old-versions -1)
#+end_src

** "Why do I have to learn Emacs Lisp in order to get Emacs to do what I want? Shouldn't Emacs just come with reasonable defaults?"

Reasonable defaults make sense for specific people. Other people might
have completely different ideas for how they want a tool to work.
Many people use Emacs and have (occasionally quite strong)
opinions about how they want it to work. It's difficult to change the defaults for everyone
[fn:: https://xkcd.com/1172/], and since Emacs is so customizable, people tend to just fix things for themselves.

There are some initiatives to put together common settings that people may like.
- https://github.com/bbatsov/prelude
- https://github.com/technomancy/emacs-starter-kit
- https://github.com/technomancy/better-defaults

You can read them to pick up ideas for customizing Emacs, or you can use them as a starting point for your own configuration.

** "If I customize my Emacs, I'll have a hard time working with other people or on other computers."

I find that optimizing my Emacs configuration for my happiness is
worth the mild annoyance of not having my shortcuts handy (or worse,
not having Emacs!) when I pair-program with other people. If you're
pair-programming with other people, you can switch your configuration
or use a different editor. =emacs -q= starts Emacs without your
personal configuration. It's good to be familiar with other editors
like Vi so that you can be productive even if that's all you have, and
then learn how to make the most of Emacs so that you can reap the
benefits over the decades.

Many people synchronize their configuration across multiple computers
by using version control systems like Git or file synchronization
tools like Dropbox. You can set up Emacs to check for hostname or
other system variables before loading system-specific configuration.

You might think it's not worth customizing Emacs if you spend most of
your time ssh-ed into other servers. With Emacs, you can use
TRAMP[fn:: http://www.gnu.org/software/tramp/] to edit files through SSH
and sudo in your local Emacs.

** "I don't have the time to fiddle around with this."

Emacs Lisp code can help you save time by automating repetitive
actions, smoothening rough edges, or enabling time-saving features
like autocompletion. Investing some time can help you save a lot of
time later. Learning from other Emacs users can help you figure out
customizations that take little time for big results.

One of the occupational hazards of using Emacs is that tweaking your
Emacs configuration can be fun, almost addictive. If you catch
yourself spending four hours fiddling with something minor, it might
be time to put that aside and focus on getting stuff done
first.[fn:: Is it worth the time - http://xkcd.com/1205/]

* "Where can I find useful Emacs Lisp code examples?"

Do you already have some Emacs Lisp code that you want to understand?
Jump ahead to the section on [[How can you understand what Emacs Lisp
code does?]]. It's easier to learn how to read Emacs Lisp when you start
with simple examples that will help you use Emacs more effectively.
Here are some useful sources:

** Packages

Emacs has lots of packages in different repositories, many of which
require a little extra code in order to be used to full effect. You
can use =M-x package-list-packages= to list the packages that Emacs
knows about by default. You can add more package repositories to
Emacs, and I'll show you how to do that later in this guide.

Check out the README, description, documentation, or source code
comments for interesting packages to find suggested code to add to
your Emacs configuration.

Here are some packages that might be interesting:
- company: adds text completion
- yasnippet: snippets and templates
- undo-tree: visualize your undo/redo history

** Webpages, blog posts, and the Emacs Wiki

While searching for information related to Emacs, you'll probably come across lots of Emacs Lisp snippets. For example, the instructions for adding the MELPA repository can be found at http://melpa.milkbox.net/#/getting-started . It has the following code:

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+end_src

The EmacsWiki (http://www.emacswiki.org/) has lots of snippets. Since this is a community-maintained wiki, you may come across code that is out of date or that refers to packages that you don't have. I've included common errors in this guide to help you figure things out - see [[Oh no!]]

** Mailing lists, newsgroups, and Q&A sites

There are many places where you can ask for help with Emacs. gnu.emacs.help is available as a mailing list[fn:: https://lists.gnu.org/mailman/listinfo/help-gnu-emacs] or as a newsgroup - check your favourite Usenet server or use Gmane[fn:: http://dir.gmane.org/gmane.emacs.help]. StackOverflow[fn:: http://stackoverflow.com/questions/tagged/emacs] and Quora[fn:: http://www.quora.com/Emacs] are popular as well. If you ask questions there, you might get answers in the form of Emacs Lisp code. You'll also come across Emacs Lisp code while searching for answers.

Find a snippet of Emacs Lisp code you want to understand more deeply, or look at the examples in the sections below.

* "How can I try Emacs Lisp code?"

It's easier to understand code if you can experiment with it. There are several ways you can try Emacs Lisp code before saving it in your configuration.

Note: As you experiment with Emacs Lisp, you might run into errors. Check out [[Oh no! I have an error!]] for some common errors and what to do about them.

Here are some ways you can run Emacs Lisp code:
- =M-x ielm=
- =*scratch*= buffer and Emacs Lisp files
- =C-x C-e= (=eval-last-sexp=)
- =M-:= (=eval-expression=)

** M-x ielm (Inferior Emacs Lisp Mode)

IELM gives you a prompt where you can type or paste in Emacs Lisp code. Start it with =M-x ielm=. Press =RET= after you enter code, and the results will be displayed. "Inferior" is a technical term referring to how it's run, not a comment on the simplicity of the tool or the code you want to try. You can go to previously-executed code, change things, and press RET to evaluate it again.

If you're copying or typing code, make sure your parentheses are all matched - every ( should have a ). IELM won't run the code unless it sees the closing parenthesis. So the following code is incomplete:

#+begin_src emacs-lisp :eval no
(message "Hello
#+end_src

but this will work:

#+begin_src emacs-lisp :eval no
(message "Hello world")
#+end_src

** The =*scratch*= buffer and Emacs Lisp =.el= files

When Emacs starts, it creates a buffer called =*scratch*= with the following contents:

#+begin_src emacs-lisp
;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

#+end_src

You can add code to the end.

#+begin_src emacs-lisp
;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

(message "Hello world")
#+end_src

Note: =;= is the comment character. Anything after the comment character is considered part of the comment. Make sure you add your code on a new line, not in the comment.

To run code ("evaluate" it, in Emacs terms), you can use the following commands based on what you want to run:
- =M-x eval-buffer= runs all the code in the current file or buffer.
- =M-x eval-region= runs the selected code. You can select code by using the mouse or by typing =C-SPC= to mark the start of the region and moving to the next.
- =C-x C-e= (=eval-last-sexp=) runs the expression (S-expression, or sexp) before the cursor. NOTE: Your cursor should be after the closing parenthesis, not on it.

In the =*scratch*= buffer, you can also press =C-j= (=eval-print-last-sexp=) after an expression in order to evaluate it and display the results in the buffer.

The =*scratch*= buffer is not automatically saved. If you would like to save your code for future use, you can create a file with an =.el= ending. =el= stands for Emacs Lisp, and Emacs will open these files in Emacs Lisp mode.

=C-x C-e= (=eval-last-sexp=) works in lots of buffers, not just in Emacs Lisp ones. You can use it to quickly try expressions while reading manual pages or other documentation.

** M-: (eval-expression)

If you want to quickly try an expression, you can use =M-:= (=eval-expression=). To see any results it displayed, you can switch to the =*Messages*= buffer.

* "How can I understand what Emacs Lisp code does?"

** Functions are at the beginning of the expression, and expressions are enclosed in parentheses

In math, operators like + and * go between the numbers they will work on.
In Emacs Lisp, the operator (or the "function") is at the start of the expression, followed by the things it's going to operate on ("arguments").

#+begin_example
( ( 1 + 2 ) * 3 )  Math expression
| |   |   | |   |
| +-+ |   | |   |
|   | |   | |   |
| +-|-------+   |
| | | |   |   +-+
| | | |   +-+ |
( * ( + 1 2 ) )    Emacs Lisp expression
#+end_example	 	 	

Here's how to calculate (1 + 2) * 3 in Emacs Lisp. Note that the multiplication is surrounded by parentheses, even if we usually leave out the parentheses in math. That's because in Emacs Lisp, all function calls have their own set of parentheses.

#+begin_src emacs-lisp
(* (+ 1 2) 3)
#+end_src

Understanding this will let you read code like:

#+begin_src emacs-lisp
(global-hl-line-mode)  
#+end_src

This calls the =global-hl-line-mode= function, which highlights the current line. 

#+begin_src emacs-lisp
(show-paren-mode)
#+end_src

This calls the =show-paren-mode= function, which shows matching parentheses when your cursor is after them.

#+begin_src emacs-lisp
(blink-cursor-mode -1)
#+end_src

This calls the =blink-cursor-mode= function with =-1= as the argument, which turns blinking cursors off.

#+begin_src emacs-lisp
(find-file "~/todo.org")
#+end_src

This opens the =todo.org= file in your home directory, creating it if it doesn't exist yet.

#+begin_src emacs-lisp
(turn-on-eldoc-mode)
#+end_src

This turns on =eldoc-mode=, which displays the argument list for the current function. You can move your point around to see documentation for other functions.

#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

This turns off beeping. Instead, when Emacs runs into an error, it will flash the title bar or screen.

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

This turns on =eldoc-mode= when a buffer is switched to Emacs Lisp mode. You'll learn more about why some things have ' and some don't in the section on [[When something is quoted, it's taken literally.]]

*** "How can I learn more about functions?"

The symbol after =(= is usually a function name, unless it's part of a
list. You'll learn how to recognize lists later. 

To find out if something is a function, what it does, what arguments
it takes, and if it has any keyboard shortcuts, use the =<f1> f=
(=describe-function=) command. Give it the function name. For example,
=<f1> f add-hook= will show you the documentation for =add-hook=, and
=<f1> f show-paren-mode= will show you the documentation for that.

The documentation for =show-paren-mode= starts with "show-paren-mode
is an interactive autoloaded Lisp function". Interactive functions can
be called with =M-x=. Read the description of the function to learn
more about arguments that you can pass to change its behavior. If it
mentions a prefix argument, that means that you can change its
behaviour by typing =C-u= before you call the function.

Use =<f1> f= to learn more about the following functions:
| =describe-function= | Yes, this is also a function! The documentation will give you alternative keyboard shortcuts such as =C-h f=. |
| =find-file=         | You can use this to open specific files                                                                       |

** "How can I learn more about variables?"

Like the way you can use =<f1> f= (=describe-function=) to learn more about a function, you can use =<f1> v= (=describe-variable=) to learn more about a variable by name. For example, use =<f1> v= to look up =visible-bell=. 

To make it easier for you to customize Emacs without writing Emacs Lisp code, many variables give you an interface for setting the variable. If you use =describe-variable= to look up the definition, you'll often see a line like "You can *customize* this variable." Click on the *customize* link in the documentation or move your point to it and press RET. You can change the value there and try it temporarily, or you can save it to your configuration. The Customize interface is good for exploring, but because the code that it generates can difficult to read or share, many people skip it and use Emacs Lisp code instead.

** When something is quoted, it's taken literally

One of the examples from the section on [[Functions are at the beginning of the expression, and expressions are enclosed in parentheses][functions]] was this:

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

=add-hook= is a function. '=emacs-lisp-mode-hook= and '=turn-on-eldoc-mode= are symbols. =emacs-lisp-mode-hook= is a variable that contains a list of functions to run, and =turn-on-eldoc-mode= is a function that we're adding to that list.

The single quote means "treat this as the name of something." If you remove the quote from =emacs-lisp-mode-hook=, Emacs will look up the value in that variable and use that as the name of the variable to actually set, and you'll probably get an error.

Here's another example:

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

This calls the =fset= function, which sets the function definition of =yes-or-no-p= to the function =y-or-n-p=. In short, it changes the "yes" or "no" prompts to "y" or "n", which can be convenient.

Not everything is quoted. You'll often see lines like this in Emacs configuration files:

#+begin_src emacs-lisp
(setq delete-old-versions -1)
#+end_src

=setq= stands for "set quoted". This is actually the same code as =(set 'delete-old-versions -1)= or =(set (quote delete-old-versions) -1)=, but 
=setq= is shorter, so it's more common.

** Lists and lists and lists of lists

You can set the value of a variable to multiple things. In Emacs configuration files, you'll often see ' used for lists. For example,

#+begin_src emacs-lisp
(setq diff-switches '("-b" "-u"))
#+end_src

sets the options for the =diff= command to a list containing two items, =-b= and =-u=. Quoting the list creates a list and quotes all the content in it as needed. You can create lists with the =list= function instead. The code above is the same as:

#+begin_src emacs-lisp
(setq diff-switches (list "-b" "-u"))
#+end_src

Some lists use the dot notation. This depends on what's expected by the function that uses the list. For example:

#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
#+end_src

This calls the =add-to-list= function with two arguments. The first argument ('=package-archives=) specifies the list to add an item to, and
the second argument ('=("melpa" . "http://melpa.milkbox.net/packages/")=) is the data to add. The dot notation =(a . b)= shows that this is a *cons cell*, which always has two parts: the *car* and the *cdr*. To understand the difference between cons cells and other lists, you need to know how lists are constructed.

A cons cell looks like this:

#+begin_example
       car              cdr
+----------------+----------------+
|                |                |
|       a        |       b        |
|                |                |
+----------------+----------------+
#+end_example

A list like '=("-b" "-u")= is made up of several cons cells.

#+begin_example
       car              cdr                         car             cdr
+----------------+----------------+         +----------------+----------------+
|                |                |         |                |                |
|      -b        |       ------------------>|       -u       |                |
|                |                |         |                |                |
+----------------+----------------+         +----------------+----------------+
#+end_example

In Emacs Lisp, '=("-b" "-u")= is equivalent to =(cons "-b" (cons "-u" nil))=, and it's not the same as =(cons "-b" "-u")=. That's why you have to be careful about whether something uses dots or not. A good way to find out is by reading other people's configuration and seeing how they use that variable.

Lists can also contain lists. For example, here's some code that saves backup files (the ones that end in =~=) to =~/.emacs.d/backups=.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

This is how the second argument breaks down:

#+begin_example
( ;; a list with one item
 ("." . "~/.emacs.d/backups") ;; a cons cell with a car of "." and a cdr of "~/.emacs.d/backups"
)
#+end_example

Advanced: Backquotes (`) are special. They quote the expression that follows them, but they also allow you to substitute values or evaluate expressions. Backquotes are useful for more complex structures or when you're working with macros. They do basically the same thing as ' for lists, but anything preceded by a comma (,) is evaluated. They're less common, but if you do come across them, note that ` is not the same as '. See the Emacs Lisp Reference for more information.[fn:: http://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html]

* Oh no! I have an error!

TODO

* Want to learn more?

Check out An Introduction to Programming in Emacs Lisp[fn:: https://www.gnu.org/software/emacs/manual/eintr.html], and delve into the Emacs Lisp Reference Manual[fn:: http://www.gnu.org/software/emacs/manual/elisp.html] for more details.

I'm working on a guide to customizing your Emacs with Emacs Lisp[fn:: http://sachachua.com/baby-steps-elisp], which goes into a little more detail than this. It also lists several other resources for learning Emacs Lisp. Good luck and have fun!

* Author's notes

- [X] Resources
  - https://www.gnu.org/software/emacs/manual/eintr.html
- [X] This document: beginner-level
  - For people who already have a programming background but who are new to Emacs Lisp (guide for complete beginners later)
    - Want to customize Emacs, but not entirely sure about what they're adding
    - Sample confusion: (add-to-list 'load-path ...) vs (add-to-list 'load-path ... t) - easily solved with C-h f add-to-list if you know how to read it
  - Assumption: you've installed Emacs 24 and have gone through the tutorial (C-h t)
  - Scope: learning how to read short snippets of code (ex: config), not learning how to read complex code (ex: comint)
- [X] Where can I find short Emacs Lisp code to learn from?
  - README for packages
  - EmacsWiki
  - mailing lists
  - Planet Emacsen
  - Look for someone who uses Emacs like you
- How can I understand what Emacs Lisp code does?
  - Ex: (global-hl-line-mode)
  - How can I read a statement?
    - Prefix - the "verb" goes at the beginning. This is actually like many programming languages, although Lisp does it consistently throughout. For ex
	- [X] How can I copy Emacs Lisp code from other people's configuration?
		- Try a little before you add things
	- [X] How can I try things a little at a time?
		- ielm
		- C-x C-e (eval-last-sexp) - works everywhere
		- =*scratch*= buffer or .el file
			- eval-buffer
			- eval-region
		- M-: (eval-expression)
		- Sometimes you need to reopen a file in order to apply the changes
- What are some of the common errors I might run into?
  - Evaluating at the wrong point
  - Missing )
  - Undefined function
  - Undefined variable or hook
  - Unexpected symbol
  - Obsolete code
  - Not a prefix key
- Okay, I like this. How can I make it part of my Emacs?
  - .emacs.d/init.el (also note about ~/.emacs)
  - Add comments
- Wait! I changed my mind!
  - delete or comment out the lines
    - ;
  - if you can't use Emacs with your current config, emacs -q
- Oh no, my init.el broke
  - emacs --debug-init
  - emacs -q
- Common types of customizations
  - function calls
  - setq
  - require
  - add-to-list
  - add-hook
  - cons
  - keybindings
    - global-set-key
    - define-key
  - defun
  - let
  - regular expressions
  - eval-after-load
- Other notes on reading
  - Whitespace
- How can I try changing things a little?
- How can I quickly navigate through code?
	- forward-sexp and backward-sexp
- Emacs Lisp is great! I want to learn more
  - Learn How to Customize Emacs with Emacs Lisp
- How can I go through code step by step?
  - edebug-defun

- Thanks
  - aidalgol, rryoumaa, shergill, taus
