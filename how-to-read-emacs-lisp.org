#+TITLE: How to Read Emacs Lisp

* Author's notes

- Resources
  - https://www.gnu.org/software/emacs/manual/eintr.html
  - http://sachachua.com/baby-steps-elisp
- Starting audience: People who already have a programming background (guide for complete beginners later)
  - assumption: you've installed Emacs 24 and have gone through the tutorial (C-h t)
- Where can I find short Emacs Lisp code to learn from?
  - README for packages
  - EmacsWiki
  - mailing lists
  - Planet Emacsen
  - Look for someone who uses Emacs like you
- How can I understand what Emacs Lisp code does?
  - Ex: (global-hl-line-mode)
  - How can I read a statement?
    - Prefix - the "verb" goes at the beginning. This is actually like many programming languages, although Lisp does it consistently throughout. For ex
- How can I copy Emacs Lisp code from other people's configuration?
  - Before you add it to the 
- How can I try things a little at a time?
  - M-: (eval-expression)
  - C-x C-e (eval-last-sexp)
  - =*scratch*= buffer or .el file
    - eval-buffer
    - eval-region
  - ielm
  - eshell
- What are some of the common errors I might run into?
  - Missing )
  - Undefined function
  - Undefined variable or hook
  - Unexpected symbol
  - Obsolete code
  - Not a prefix key
- Okay, I like this. How can I make it part of my Emacs?
  - .emacs.d/init.el
  - Add comments
- Wait! I changed my mind!
  - delete or comment out the lines 
    - ;
  - if you can't use Emacs with your current config, emacs -q
- Oh no, my init.el broke
  - emacs --debug-init
  - emacs -q
- How can I try changing things a little?
- How can I quickly navigate through code?
	- forward-sexp and backward-sexp
- Emacs Lisp is great! I want to learn more
  - Learn How to Customize Emacs with Emacs Lisp
- How can I go through code step by step?
  - edebug-defun
